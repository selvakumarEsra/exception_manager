import _regeneratorRuntime from 'babel-runtime/regenerator';
import _Object$assign from 'babel-runtime/core-js/object/assign';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';
import _getIterator from 'babel-runtime/core-js/get-iterator';
import _Object$create from 'babel-runtime/core-js/object/create';
import _Map from 'babel-runtime/core-js/map';
import toRegExp from 'path-to-regexp';

var cache = new _Map();

function decodeParam(val) {
  if (!(typeof val === 'string' || val.length === 0)) {
    return val;
  }

  try {
    return decodeURIComponent(val);
  } catch (err) {
    if (err instanceof URIError) {
      err.message = 'Failed to decode param \'' + val + '\'';
      err.status = 400;
    }

    throw err;
  }
}

function matchPathBase(end, routePath, urlPath) {
  var key = routePath + '|' + end;
  var regexp = cache.get(key);

  if (!regexp) {
    var keys = [];
    regexp = { pattern: toRegExp(routePath, keys, { end: end }), keys: keys };
    cache.set(key, regexp);
  }

  var m = regexp.pattern.exec(urlPath);

  if (!m) {
    return null;
  }

  var params = _Object$create(null);
  var path = m[0];

  for (var i = 1; i < m.length; i++) {
    params[regexp.keys[i - 1].name] = m[i] !== undefined ? decodeParam(m[i]) : undefined;
  }

  return { path: path === '' ? '/' : path, keys: regexp.keys.slice(), params: params };
}

var matchPath = matchPathBase.bind(undefined, true);
var matchBasePath = matchPathBase.bind(undefined, false);

var _marked = [matchRoute].map(_regeneratorRuntime.mark);

function matchRoute(route, baseUrl, path) {
  var match, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, childRoute, newPath;

  return _regeneratorRuntime.wrap(function matchRoute$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          match = void 0;

          if (route.children) {
            _context.next = 6;
            break;
          }

          match = matchPath(route.path, path);

          if (!match) {
            _context.next = 6;
            break;
          }

          _context.next = 6;
          return {
            route: route,
            baseUrl: baseUrl,
            path: match.path,
            keys: match.keys,
            params: match.params
          };

        case 6:
          if (!route.children) {
            _context.next = 37;
            break;
          }

          match = matchBasePath(route.path, path);

          if (!match) {
            _context.next = 37;
            break;
          }

          _context.next = 11;
          return {
            route: route,
            baseUrl: baseUrl,
            path: match.path,
            keys: match.keys,
            params: match.params
          };

        case 11:
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 14;
          _iterator = _getIterator(route.children);

        case 16:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context.next = 23;
            break;
          }

          childRoute = _step.value;
          newPath = path.substr(match.path.length);
          return _context.delegateYield(matchRoute(childRoute, baseUrl + (match.path === '/' ? '' : match.path), newPath.startsWith('/') ? newPath : '/' + newPath), 't0', 20);

        case 20:
          _iteratorNormalCompletion = true;
          _context.next = 16;
          break;

        case 23:
          _context.next = 29;
          break;

        case 25:
          _context.prev = 25;
          _context.t1 = _context['catch'](14);
          _didIteratorError = true;
          _iteratorError = _context.t1;

        case 29:
          _context.prev = 29;
          _context.prev = 30;

          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }

        case 32:
          _context.prev = 32;

          if (!_didIteratorError) {
            _context.next = 35;
            break;
          }

          throw _iteratorError;

        case 35:
          return _context.finish(32);

        case 36:
          return _context.finish(29);

        case 37:
        case 'end':
          return _context.stop();
      }
    }
  }, _marked[0], this, [[14, 25, 29, 37], [30,, 32, 36]]);
}

var resolve = function () {
  var ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(routes, pathOrContext) {
    var next = function () {
      var ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
        var _match$next, newContext;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _match$next = match.next();
                value = _match$next.value;
                done = _match$next.done;

                if (!(value && !done)) {
                  _context.next = 23;
                  break;
                }

                newContext = _Object$assign({}, context, value);

                if (!value.route.action) {
                  _context.next = 23;
                  break;
                }

                if (!errorRoute) {
                  _context.next = 20;
                  break;
                }

                _context.prev = 7;
                _context.next = 10;
                return value.route.action(newContext, newContext.params);

              case 10:
                return _context.abrupt('return', _context.sent);

              case 13:
                _context.prev = 13;
                _context.t0 = _context['catch'](7);

                _context.t0.status = _context.t0.status || 500;
                newContext.error = _context.t0;
                return _context.abrupt('return', errorRoute.action(newContext, newContext.params));

              case 18:
                _context.next = 23;
                break;

              case 20:
                _context.next = 22;
                return value.route.action(newContext, newContext.params);

              case 22:
                return _context.abrupt('return', _context.sent);

              case 23:
                return _context.abrupt('return', undefined);

              case 24:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[7, 13]]);
      }));

      return function next() {
        return ref.apply(this, arguments);
      };
    }();

    var context, root, result, value, done, errorRoute, match;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            context = typeof pathOrContext === 'string' || pathOrContext instanceof String ? { path: pathOrContext } : pathOrContext;
            root = Array.isArray(routes) ? { path: '/', children: routes } : routes;
            result = void 0;
            value = void 0;
            done = false;
            errorRoute = root.children && root.children.find(function (x) {
              return x.path === '/error';
            });
            match = matchRoute(root, '', context.path);


            context.next = next;
            context.end = function (data) {
              result = data;done = true;
            };

          case 9:
            if (done) {
              _context2.next = 17;
              break;
            }

            _context2.next = 12;
            return next();

          case 12:
            result = _context2.sent;

            if (!(result !== undefined)) {
              _context2.next = 15;
              break;
            }

            return _context2.abrupt('break', 17);

          case 15:
            _context2.next = 9;
            break;

          case 17:
            if (!(result === undefined && errorRoute)) {
              _context2.next = 21;
              break;
            }

            context.error = new Error('Not found');
            context.error.status = 404;
            return _context2.abrupt('return', errorRoute.action(context, {}));

          case 21:
            return _context2.abrupt('return', result);

          case 22:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function resolve(_x, _x2) {
    return ref.apply(this, arguments);
  };
}();

var main = { resolve: resolve, match: resolve /* alias */ };

export { resolve, resolve as match };export default main;
//# sourceMappingURL=browser.mjs.map