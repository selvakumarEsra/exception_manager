import _Object$assign from 'babel-runtime/core-js/object/assign';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';
import _Object$create from 'babel-runtime/core-js/object/create';
import _Map from 'babel-runtime/core-js/map';
import toRegExp from 'path-to-regexp';

const cache = new _Map();

function decodeParam(val) {
  if (!(typeof val === 'string' || val.length === 0)) {
    return val;
  }

  try {
    return decodeURIComponent(val);
  } catch (err) {
    if (err instanceof URIError) {
      err.message = `Failed to decode param '${ val }'`;
      err.status = 400;
    }

    throw err;
  }
}

function matchPathBase(end, routePath, urlPath) {
  const key = `${ routePath }|${ end }`;
  let regexp = cache.get(key);

  if (!regexp) {
    const keys = [];
    regexp = { pattern: toRegExp(routePath, keys, { end }), keys };
    cache.set(key, regexp);
  }

  const m = regexp.pattern.exec(urlPath);

  if (!m) {
    return null;
  }

  const params = _Object$create(null);
  const path = m[0];

  for (let i = 1; i < m.length; i++) {
    params[regexp.keys[i - 1].name] = m[i] !== undefined ? decodeParam(m[i]) : undefined;
  }

  return { path: path === '' ? '/' : path, keys: regexp.keys.slice(), params };
}

const matchPath = matchPathBase.bind(undefined, true);
const matchBasePath = matchPathBase.bind(undefined, false);

function* matchRoute(route, baseUrl, path) {
  let match;

  if (!route.children) {
    match = matchPath(route.path, path);

    if (match) {
      yield {
        route,
        baseUrl,
        path: match.path,
        keys: match.keys,
        params: match.params
      };
    }
  }

  if (route.children) {
    match = matchBasePath(route.path, path);
    if (match) {
      yield {
        route,
        baseUrl,
        path: match.path,
        keys: match.keys,
        params: match.params
      };

      for (const childRoute of route.children) {
        const newPath = path.substr(match.path.length);
        yield* matchRoute(childRoute, baseUrl + (match.path === '/' ? '' : match.path), newPath.startsWith('/') ? newPath : `/${ newPath }`);
      }
    }
  }
}

let resolve = (() => {
  var ref = _asyncToGenerator(function* (routes, pathOrContext) {
    let next = (() => {
      var ref = _asyncToGenerator(function* () {
        var _match$next = match.next();

        value = _match$next.value;
        done = _match$next.done;


        if (value && !done) {
          const newContext = _Object$assign({}, context, value);

          if (value.route.action) {
            if (errorRoute) {
              try {
                return yield value.route.action(newContext, newContext.params);
              } catch (err) {
                err.status = err.status || 500;
                newContext.error = err;
                return errorRoute.action(newContext, newContext.params);
              }
            } else {
              return yield value.route.action(newContext, newContext.params);
            }
          }
        }

        return undefined;
      });

      return function next() {
        return ref.apply(this, arguments);
      };
    })();

    const context = typeof pathOrContext === 'string' || pathOrContext instanceof String ? { path: pathOrContext } : pathOrContext;
    const root = Array.isArray(routes) ? { path: '/', children: routes } : routes;
    let result;
    let value;
    let done = false;

    const errorRoute = root.children && root.children.find(function (x) {
      return x.path === '/error';
    });
    const match = matchRoute(root, '', context.path);

    context.next = next;
    context.end = function (data) {
      result = data;done = true;
    };

    while (!done) {
      result = yield next();

      if (result !== undefined) {
        break;
      }
    }

    if (result === undefined && errorRoute) {
      context.error = new Error('Not found');
      context.error.status = 404;
      return errorRoute.action(context, {});
    }

    return result;
  });

  return function resolve(_x, _x2) {
    return ref.apply(this, arguments);
  };
})();

var main = { resolve, match: resolve /* alias */ };

export { resolve, resolve as match };export default main;
//# sourceMappingURL=main.mjs.map